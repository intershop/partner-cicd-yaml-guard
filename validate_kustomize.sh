#!/bin/bash
# Kaynak: https://github.com/redhat-cop/gitops-catalog/blob/main/scripts/validate_kustomize.sh
# shellcheck disable=SC2034,SC2044

# Yardım mesajını gösterir
display_help(){
  echo "./$(basename "$0") [ -d | --directory DIRECTORY ] [ -e | --enforce-all-schemas ] [ -h | --help ] [ -sl | --schema-location ]
Script to validate the manifests generated by Kustomize
Where:
  -d  | --directory DIRECTORY  Base directory containing Kustomize overlays
  -e  | --enforce-all-schemas  Enable enforcement of all schemas
  -h  | --help                 Display this help text
  -sl | --schema-location      Location containing schemas"
}

# Kullanılacak Kustomize komutunu belirle (kustomize veya oc kustomize)
which kustomize > /dev/null && KUSTOMIZE_CMD="kustomize build" || echo "Kustomize not in path; using 'oc kustomize' instead"
# Helm kurulu mu kontrol et
which helm > /dev/null && GOT_HELM="--enable-helm" || echo "Helm not in path; skipping kustomizations that use helm"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
KUSTOMIZE_CMD="${KUSTOMIZE_CMD:-oc kustomize}" # oc kustomize varsayılan eğer kustomize yoksa
IGNORE_MISSING_SCHEMAS="--ignore-missing-schemas" # Varsayılan olarak eksik şemaları yoksay
SCHEMA_LOCATION="./openshift-json-schema" # Varsayılan şema konumu
KUSTOMIZE_DIRS="." # Varsayılan Kustomize dizini

# Komut satırı argümanlarını işle
init(){
  for i in "${@}"
  do
    case $i in
      -d | --directory )
        shift
        KUSTOMIZE_DIRS="${1}"
        shift
        ;;
      -e | --enforce-all-schemas )
        IGNORE_MISSING_SCHEMAS="" # Şema zorlamasını etkinleştir
        shift
        ;;
      -sl | --schema-location )
        shift
        SCHEMA_LOCATION="${1}"
        shift
        ;;
      -h | --help )
        display_help
        exit 0
        ;;
      -*) echo >&2 "Invalid option: " "${@}"
          exit 1
          ;;
    esac
  done
}

# (Bu fonksiyon script'te var ama yorumlanmış, otomatik düzeltme yapar)
kustomization_auto_fix(){
  BUILD_PATH=${1}
  [ "${KUSTOMIZE_CMD}" == "kustomize build" ] || return
  FIX_CMD="${FIX_CMD:-kustomize edit fix}"
  pushd "${BUILD_PATH}" || return
  ${FIX_CMD}
  popd || return
}

# Belirli bir Kustomization dizinini build eder ve doğrular
kustomization_build(){
  BUILD=${1}
  local KUSTOMIZE_BUILD_OUTPUT
  local cmd_response

  # Helm desteği varsa veya gerekiyorsa ekle
  if [ -n "${GOT_HELM}" ]; then
    echo "Running: ${KUSTOMIZE_CMD} \"${BUILD}\" \"${GOT_HELM}\""
    KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}" "${GOT_HELM}")
    cmd_response=$?
  else
    # Eğer helm yoksa ve kustomization.yaml helmCharts içeriyorsa atla
    if grep -qE '^helmCharts:$' "${BUILD}/kustomization.yaml" && [ "${KUSTOMIZE_CMD}" == "kustomize build" ]; then
      echo "[SKIP] Helm not found, skipping Helm chart in ${BUILD}"
      return 0
    fi

    # Helm parametresi olmadan build et
    echo "Running: ${KUSTOMIZE_CMD} \"${BUILD}\""
    KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}")
    cmd_response=$?
  fi

  # Kustomize build komutu başarısız olduysa
  if [ $cmd_response -ne 0 ]; then
     # Eğer Component türündeyse hata verme (özel durum)
     if grep -qE '^kind: Component$' "${BUILD}/kustomization.yaml"; then
        echo "[SKIP] Kustomize build failed for Component ${BUILD}, skipping validation."
        return 0
     fi
     # Diğer durumlarda hata ver ve çık
     echo "[ERROR] Kustomize build failed for ${BUILD} with exit code ${cmd_response}."
     exit 1 # Pipeline'ı başarısız yapacak olan çıkış kodu
  fi

  # Kustomize build başarılıysa, çıktıyı kubeval ile doğrula
  echo "Validating output with kubeval..."
  echo "$KUSTOMIZE_BUILD_OUTPUT" | kubeval ${IGNORE_MISSING_SCHEMAS} --schema-location="file://${SCHEMA_LOCATION}" --force-color
  cmd_response=$?

  if [ $cmd_response -ne 0 ]; then
    # Component değilse ve kubeval başarısız olursa hata ver
    if ! grep -qE '^kind: Component$' "${BUILD}/kustomization.yaml"; then
        echo "[ERROR] Kubeval validation failed for ${BUILD}."
        exit 1 # Pipeline'ı başarısız yapacak olan çıkış kodu
    else
        # Component'ler için kubeval hatasını şimdilik yoksayabiliriz (isteğe bağlı)
        echo "[WARN] Kubeval validation failed for Component ${BUILD}, but continuing."
    fi
  fi

  echo "[OK] Validation successful for ${BUILD}"
}

# Tüm Kustomization dizinlerini bul ve işle
kustomization_process(){
  echo "Validating Kustomize directories in: ${KUSTOMIZE_DIRS}"
  # -type f ekleyerek sadece dosya olduğundan emin olalım
  find "${KUSTOMIZE_DIRS}" -type f -name "kustomization.yaml" -print0 | while IFS= read -r -d $'\0' kustomization_file; do
      LINT=$(dirname "${kustomization_file}")
      echo "--- Processing: ${LINT} ---"
      kustomization_build "${LINT}"
      # kustomization_auto_fix "${LINT}" # Otomatik düzeltme kapalı
  done
  # Eğer find komutu hiçbir şey bulamazsa $? 0 olur, ama build içinde exit 1 olursa script zaten çıkar.
  # Döngü sonrası ek kontrol gerekebilir, ancak build içindeki exit 1 yeterli olmalı.
  # Eğer döngüye hiç girmezse veya tüm build'ler başarılı olursa buraya gelinir.
  echo "---"
  echo "Kustomize check finished."
  # Script buraya kadar hatasız geldiyse başarılı kabul edilir (exit 0 varsayılan)
}

# Ana script akışı
init "${@}"          # Argümanları işle
kustomization_process # Doğrulama işlemini başlat